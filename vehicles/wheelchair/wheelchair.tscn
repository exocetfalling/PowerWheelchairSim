[gd_scene load_steps=10 format=3 uid="uid://c0v0s0n3sp000"]

[ext_resource type="PackedScene" uid="uid://bbh72u2em64ms" path="res://vehicles/wheelchair/model/wheelchair_model.tscn" id="1"]
[ext_resource type="Script" uid="uid://cymqh3vwjwfxb" path="res://scripts/pid_calc.gd" id="3"]
[ext_resource type="PackedScene" uid="uid://dra5rbwi638wh" path="res://uires/hud_basic/hud_basic.tscn" id="4"]
[ext_resource type="Script" uid="uid://2htfpjqhnla4" path="res://uires/hud_basic/hud_basic.gd" id="5"]

[sub_resource type="GDScript" id="GDScript_j6umd"]
script/source = "extends VehicleBody3D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

@export var WHEELBASE_WIDTH: float = 1
@export var WHEEL_RADIUS_REAR: float = 1

var input_joystick : Vector2 = Vector2.ZERO

var linear_velocity_local : Vector3 = Vector3.ZERO
var angular_velocity_local : Vector3 = Vector3.ZERO

var steering_angle_target_l : float = 0.00
var steering_angle_target_r : float = 0.00

var steering_lerp_factor : float = 0.2

var wheel_speed_rear_left = 0.00
var wheel_speed_rear_right = 0.00

var turn_radius: float = 0.00
var wheel_velocity_ratio: float = 0.00

var wheel_speed_rear_left_tgt: float = 0.00
var wheel_speed_rear_right_tgt: float = 0.00

@export_range(0.1, 2, 0.1) var speed_limit: float = 1.5

@export_range(0.1, 2, 0.1) var turn_rate_scalar: float = 1

var prox_sensor_01_valid: bool = false
var prox_sensor_02_valid: bool = false
var prox_sensor_03_valid: bool = false
var prox_sensor_04_valid: bool = false
var prox_sensor_05_valid: bool = false
var prox_sensor_06_valid: bool = false
var prox_sensor_07_valid: bool = false
var prox_sensor_08_valid: bool = false
var prox_sensor_09_valid: bool = false

var prox_sensor_01_value: float = 0
var prox_sensor_02_value: float = 0
var prox_sensor_03_value: float = 0
var prox_sensor_04_value: float = 0
var prox_sensor_05_value: float = 0
var prox_sensor_06_value: float = 0
var prox_sensor_07_value: float = 0
var prox_sensor_08_value: float = 0
var prox_sensor_09_value: float = 0


# Called when the node enters the scene tree for the first time.
func _ready():
	#DebugOverlay.stats.add_property(self, \"input_joystick\", \"round\")
#	DebugOverlay.stats.add_property(self, \"angular_velocity_local\", \"round\")
#	DebugOverlay.stats.add_property(self, \"steering_angle_target\", \"round\")
#	DebugOverlay.stats.add_property(self, \"steering\", \"round\")
#	DebugOverlay.stats.add_property(self, \"wheel_velocity_ratio\", \"\")
#	DebugOverlay.stats.add_property(self, \"turn_radius\", \"\")
	#DebugOverlay.stats.add_property(self, \"linear_velocity_local\", \"round\")
	pass # Replace with function body.

func interpolate_linear(value_current, value_target, rate, delta_time):
	if (abs(value_current - value_target) > delta_time):
		if (value_current < value_target):
			return value_current + rate * delta_time
		if (value_current > value_target):
			return value_current - rate * delta_time
		else:
			return value_target
	else:
		return value_target

# Called every physics frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	get_input(delta)
	
	linear_velocity_local = (linear_velocity) * self.transform.basis
	angular_velocity_local = global_transform.basis.z * (angular_velocity)
	
#	steering_angle = atan2((linear_velocity_local.x - angular_velocity.y * 0.22), -linear_velocity_local.z)
#	steering_angle = atan2(angular_velocity.y * 0.22, -linear_velocity_local.z)

	# Simulate castering front wheels
	steering_angle_target_l = atan2(0.391, (turn_radius + $WheelFrontLeft.position.x))
	steering_angle_target_r = atan2(0.391, (turn_radius + $WheelFrontRight.position.x))
	
	wheel_speed_rear_left_tgt = \\
		-(+input_joystick.x * turn_rate_scalar + input_joystick.y) * speed_limit / WHEEL_RADIUS_REAR
	
	wheel_speed_rear_right_tgt = \\
		-(-input_joystick.x * turn_rate_scalar + input_joystick.y) * speed_limit / WHEEL_RADIUS_REAR
	
	$WheelRearLeft.engine_force = \\
		$PIDCalcWheelLeft.calc_PID_output(wheel_speed_rear_left_tgt, wheel_speed_rear_left)
	$WheelRearRight.engine_force = \\
		$PIDCalcWheelRight.calc_PID_output(wheel_speed_rear_right_tgt, wheel_speed_rear_right)
	
	
	# Increase caster turn rate as velocity increases
	# Clamping from 0 to 1
	steering_lerp_factor = clamp((linear_velocity_local.length()), 0, 1)
#	steering_lerp_factor = 0.5
	
	wheel_speed_rear_left = $WheelRearLeft.get_rpm() * 0.1047
	wheel_speed_rear_right = $WheelRearRight.get_rpm() * 0.1047
	
	if (wheel_speed_rear_left - wheel_speed_rear_right) != 0:
		wheel_velocity_ratio = \\
			(wheel_speed_rear_left + wheel_speed_rear_right) / \\
			(wheel_speed_rear_left - wheel_speed_rear_right)
	else:
		wheel_velocity_ratio = INF
	
	turn_radius = -wheel_velocity_ratio * WHEEL_RADIUS_REAR
	
	$WheelFrontLeft.steering = rad_to_deg(lerp_angle( \\
		deg_to_rad($WheelFrontLeft.steering), \\
		steering_angle_target_l, \\
		steering_lerp_factor
		))
	$WheelFrontRight.steering = rad_to_deg(lerp_angle( \\
		deg_to_rad( $WheelFrontRight.steering), \\
		steering_angle_target_r, \\
		steering_lerp_factor
		))
	
	# Sensors
	if $ProxSensor01.is_colliding():
		prox_sensor_01_valid = true
		prox_sensor_01_value = \\
			($ProxSensor01.get_collision_point() - $ProxSensor01.global_position).length()
	else:
		prox_sensor_01_valid = false
		prox_sensor_01_value = \\
			$ProxSensor01.target_position.length()
	
	if $ProxSensor02.is_colliding():
		prox_sensor_02_valid = true
		prox_sensor_02_value = \\
			($ProxSensor02.get_collision_point() - $ProxSensor02.global_position).length()
	else:
		prox_sensor_02_valid = false
		prox_sensor_02_value = \\
			$ProxSensor02.target_position.length()
	
	if $ProxSensor03.is_colliding():
		prox_sensor_03_valid = true
		prox_sensor_03_value = \\
			($ProxSensor03.get_collision_point() - $ProxSensor03.global_position).length()
	else:
		prox_sensor_03_valid = false
		prox_sensor_03_value = \\
			$ProxSensor03.target_position.length()
	
	if $ProxSensor04.is_colliding():
		prox_sensor_04_valid = true
		prox_sensor_04_value = \\
			($ProxSensor04.get_collision_point() - $ProxSensor04.global_position).length()
	else:
		prox_sensor_04_valid = false
		prox_sensor_04_value = \\
			$ProxSensor04.target_position.length()
	
	if $ProxSensor05.is_colliding():
		prox_sensor_05_valid = true
		prox_sensor_05_value = \\
			($ProxSensor05.get_collision_point() - $ProxSensor05.global_position).length()
	else:
		prox_sensor_05_valid = false
		prox_sensor_05_value = \\
			$ProxSensor05.target_position.length()
	
	if $ProxSensor06.is_colliding():
		prox_sensor_06_valid = true
		prox_sensor_06_value = \\
			($ProxSensor06.get_collision_point() - $ProxSensor06.global_position).length()
	else:
		prox_sensor_06_valid = false
		prox_sensor_06_value = \\
			$ProxSensor06.target_position.length()
	
	if $ProxSensor07.is_colliding():
		prox_sensor_07_valid = true
		prox_sensor_07_value = \\
			($ProxSensor07.get_collision_point() - $ProxSensor07.global_position).length()
	else:
		prox_sensor_07_valid = false
		prox_sensor_07_value = \\
			$ProxSensor07.target_position.length()
	
	if $ProxSensor08.is_colliding():
		prox_sensor_08_valid = true
		prox_sensor_08_value = \\
			($ProxSensor08.get_collision_point() - $ProxSensor08.global_position).length()
	else:
		prox_sensor_08_valid = false
		prox_sensor_08_value = \\
			$ProxSensor08.target_position.length()
	
	if $ProxSensor09.is_colliding():
		prox_sensor_09_valid = true
		prox_sensor_09_value = \\
			($ProxSensor09.get_collision_point() - $ProxSensor09.global_position).length()
	else:
		prox_sensor_09_valid = false
		prox_sensor_09_value = \\
			$ProxSensor09.target_position.length()
	
	
	$HUDBasic/Sensors/ProxSensor01.value = prox_sensor_01_value
	$HUDBasic/Sensors/ProxSensor02.value = prox_sensor_02_value
	$HUDBasic/Sensors/ProxSensor03.value = prox_sensor_03_value
	$HUDBasic/Sensors/ProxSensor04.value = prox_sensor_04_value
	$HUDBasic/Sensors/ProxSensor05.value = prox_sensor_05_value
	$HUDBasic/Sensors/ProxSensor06.value = prox_sensor_06_value
	$HUDBasic/Sensors/ProxSensor07.value = prox_sensor_07_value
	$HUDBasic/Sensors/ProxSensor08.value = prox_sensor_08_value
	$HUDBasic/Sensors/ProxSensor09.value = prox_sensor_09_value


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	# Animations 
	$Model/WheelRearLeft.rotation = $WheelRearLeft.rotation
	$Model/WheelRearRight.rotation = $WheelRearRight.rotation
	$Model/WheelRearLeft.position = $WheelRearLeft.position
	$Model/WheelRearRight.position = $WheelRearRight.position
	
	# Fix inverted rims
	$Model/WheelRearLeft.rotation.x = -$WheelRearLeft.rotation.x
	$Model/WheelRearLeft.rotation.y = $WheelRearLeft.rotation.y + PI
	$Model/WheelRearRight.rotation.x = -$WheelRearRight.rotation.x
	$Model/WheelRearRight.rotation.y = $WheelRearRight.rotation.y + PI
	
	$Model/CastorLeft.rotation.y = deg_to_rad($WheelFrontLeft.steering)
	$Model/CastorRight.rotation.y = deg_to_rad($WheelFrontRight.steering)
	
	$Model/CastorLeft/WheelFrontLeft.rotation.x = $WheelFrontLeft.rotation.x
	$Model/CastorRight/WheelFrontRight.rotation.x = $WheelFrontRight.rotation.x
	
	$HUDBasic.current_speed = linear_velocity.length()
	pass

func get_input(delta):
	# Joystick input as axes
	input_joystick.x = Input.get_axis(\"joystick_left\", \"joystick_right\")
	input_joystick.y = Input.get_axis(\"joystick_down\", \"joystick_up\")
	
	# Camera
	$CameraFPV.rotation.x = \\
		lerp($CameraFPV.rotation.x, Input.get_axis(\"cam_down\", \"cam_up\"), 0.1)
	$CameraFPV.rotation.y = \\
		lerp($CameraFPV.rotation.y, Input.get_axis(\"cam_left\", \"cam_right\") * -3, 0.1)
	$CameraFPV.position.x = \\
		lerp($CameraFPV.position.x, Input.get_axis(\"cam_left\", \"cam_right\") * 0.1, 0.1)
"

[sub_resource type="BoxShape3D" id="2"]
size = Vector3(0.414, 0.04, 0.5)

[sub_resource type="BoxShape3D" id="4"]
size = Vector3(0.414, 0.04, 0.35)

[sub_resource type="BoxShape3D" id="3"]
size = Vector3(0.333988, 0.04, 0.090221)

[sub_resource type="BoxShape3D" id="1"]
size = Vector3(0.413528, 0.536672, 0.0285416)

[node name="Wheelchair" type="VehicleBody3D"]
mass = 100.0
continuous_cd = true
script = SubResource("GDScript_j6umd")
WHEELBASE_WIDTH = 0.49
WHEEL_RADIUS_REAR = 0.4
turn_rate_scalar = 0.5

[node name="CollisionShapeSeat" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0738329, 0)
shape = SubResource("2")

[node name="CollisionShapeAntiTip" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.965926, -0.258819, 0, 0.258819, 0.965926, 0, -0.349691, 0.335893)
shape = SubResource("4")

[node name="CollisionShapeFootrest" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.965926, -0.258819, 0, 0.258819, 0.965926, 0, -0.398437, -0.460226)
shape = SubResource("3")

[node name="CollisionShapeBack" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.0493933, 0.187811)
shape = SubResource("1")

[node name="Model" parent="." instance=ExtResource("1")]

[node name="WheelRearLeft" type="VehicleWheel3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.245, -0.21, 0.173)
use_as_traction = true
wheel_roll_influence = 0.5
wheel_radius = 0.29
wheel_rest_length = 0.005
wheel_friction_slip = 0.8
suspension_travel = 0.01
suspension_stiffness = 500.0
suspension_max_force = 400.0
damping_compression = 1.0
damping_relaxation = 1.0

[node name="WheelRearRight" type="VehicleWheel3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.245, -0.21, 0.173)
use_as_traction = true
wheel_roll_influence = 0.5
wheel_radius = 0.29
wheel_rest_length = 0.005
wheel_friction_slip = 0.8
suspension_travel = 0.01
suspension_stiffness = 500.0
suspension_max_force = 400.0
damping_compression = 1.0
damping_relaxation = 1.0

[node name="WheelFrontLeft" type="VehicleWheel3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.245, -0.412604, -0.218373)
use_as_steering = true
wheel_radius = 0.08
wheel_rest_length = 0.002
wheel_friction_slip = 0.01
suspension_travel = 0.03
suspension_stiffness = 200.0
suspension_max_force = 400.0
damping_compression = 1.0
damping_relaxation = 1.0

[node name="WheelFrontRight" type="VehicleWheel3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.245, -0.413, -0.218)
use_as_steering = true
wheel_radius = 0.08
wheel_rest_length = 0.002
wheel_friction_slip = 0.01
suspension_travel = 0.03
suspension_stiffness = 200.0
suspension_max_force = 400.0
damping_compression = 1.0
damping_relaxation = 1.0

[node name="CameraFPV" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.906308, 0.422618, 0, -0.422618, 0.906308, 0, 0.5, 0)
keep_aspect = 0
far = 10000.0

[node name="CameraRear" type="Camera3D" parent="."]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0.229124)

[node name="PIDCalcWheelLeft" type="Node" parent="."]
script = ExtResource("3")
term_P = 50.0
term_I = 100.0
param_tuning_active = false

[node name="PIDCalcWheelRight" type="Node" parent="."]
script = ExtResource("3")
term_P = 50.0
term_I = 100.0
param_tuning_active = false

[node name="CSGSphere3D" type="CSGSphere3D" parent="."]
visible = false
radius = 0.1

[node name="HUDBasic" parent="." instance=ExtResource("4")]
script = ExtResource("5")

[node name="ProxSensor01" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.2, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor02" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.15, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor03" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor04" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.05, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor05" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor06" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.05, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor07" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.1, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor08" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.15, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)

[node name="ProxSensor09" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.2, -0.0824538, 0.47)
target_position = Vector3(0, 0, 2)
